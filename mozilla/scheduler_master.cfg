# import/reload dance so that reconfigs work
# vim: ft=python
import buildbotcustom.misc
import master_common
from master_common import items_at_least
import config
import thunderbird_config
import master_localconfig
reload(buildbotcustom.misc)
reload(master_common)
reload(config)
reload(thunderbird_config)
reload(master_localconfig)

from master_common import BuildmasterConfig
from build.paths import getRealpath
c = BuildmasterConfig
for key, value in master_localconfig.BuildmasterConfig.items():
    if key in c:
        c[key].extend(value)
    else:
        c[key] = value

# Create our QueueDir objects
# This is reloaded in buildbotcustom.misc
from mozilla_buildtools.queuedir import QueueDir
commandsQueue = QueueDir('commands', '%s/commands' % master_localconfig.QUEUEDIR)

from config import BRANCHES, PROJECTS, SLAVES, TRY_SLAVES
from thunderbird_config import BRANCHES as THUNDERBIRD_BRANCHES
from master_localconfig import ENABLE_RELEASES, ACTIVE_RELEASE_BRANCHES, \
    ACTIVE_THUNDERBIRD_RELEASE_BRANCHES

ACTIVE_BRANCHES = BRANCHES.keys()
ACTIVE_THUNDERBIRD_BRANCHES = THUNDERBIRD_BRANCHES.keys()

ACTIVE_PROJECTS = PROJECTS.keys()

import buildbotcustom.status.mail
# Don't reload buildbotcustom.status.mail, it gets reloaded by misc

from buildbotcustom.misc import generateBranchObjects, generateProjectObjects, mergeBuildObjects
from buildbotcustom.status.mail import ChangeNotifier

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

buildObjects = {'status': [], 'change_source': [], 'schedulers': []}

import passwords
reload(passwords)

def builder_filter(bname, builder_name):
    if bname not in builder_name:
        return True
    return False

# get list of branches to disable buildbot opt builds for
# Bug 1353376 - Turn off buildbot macosx64 opt builds scheduling
# Bug 1373282 - mac dev edition builds and tests will be scheduled via bbb
# Bug 1402457 - run periodic file updates via TC
disable_osx_sched = []
disable_win_sched = []
disable_periodic_file_sched = []
for name, branch in items_at_least(BRANCHES, 'gecko_version', 55):
    disable_osx_sched.append(name)
for name, branch in items_at_least(BRANCHES, 'gecko_version', 56):
    if name != "try":
        disable_win_sched.append(name)
for name, branch in items_at_least(BRANCHES, 'gecko_version', 58):
    disable_periodic_file_sched.append(name)

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch,
            getattr(passwords, 'secrets', None))
    for s in branchObjects.get('schedulers', [])[:]:
        # builder names to be deleted
        if not s.builderNames:
            continue

        bnames = []
        if branch in disable_periodic_file_sched:
            bnames.extend(['Linux x86-64 ' + branch + ' periodic file update'])
        if branch in disable_osx_sched:
            bnames.extend(['OS X 10.7 ' + branch + " build", 'OS X 10.7 ' + branch + " devedition build"])
        if branch in disable_win_sched:
            bnames.extend([
                'WINNT 5.2 ' + branch + " build",
                'WINNT 5.2 ' + branch + " leak test build",
                'WINNT 5.2 ' + branch + " pgo-build",
                'WINNT 5.2 ' + branch + " devedition build",
                'WINNT 6.1 x86-64 ' + branch + " build",
                'WINNT 6.1 x86-64 ' + branch + " pgo-build",
                'WINNT 6.1 x86-64 ' + branch + " leak test build",
                'WINNT 6.1 x86-64 ' + branch + " devedition build",
            ])
        for bname in bnames:
            pre = s.builderNames
            s.builderNames = [b for b in s.builderNames if builder_filter(bname, b)]
            post = s.builderNames
            # builder name to be deleted
            if bname in set(pre) - set(post):
                assert len(set(pre) - set(post)) == 1
            # schedulers did not include builder name to be deleted
            else:
                assert len(set(pre) - set(post)) == 0

        if not s.builderNames:
            # This scheduler has no builders left and should be removed
            branchObjects['schedulers'].remove(s)
    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

# get list of branches to disable buildbot builds for
# Bug 1459831 - Switch off buildbot builds on comm-beta
disable_tb_sched = []
for name, branch in items_at_least(BRANCHES, 'gecko_version', 61):
    if name != "try":
        disable_tb_sched.append(name)
for branch in ACTIVE_THUNDERBIRD_BRANCHES:
    branchObjects = generateBranchObjects(THUNDERBIRD_BRANCHES[branch], branch)

    for s in branchObjects.get('schedulers', [])[:]:
        # builder names to be deleted
        if not s.builderNames:
            continue

        bnames = []
        if branch in disable_tb_sched:
            bnames.extend([
                'TB Linux x86-64 ' + branch + ' periodic file update',
                'TB Linux ' + branch + ' build',
                'TB Linux ' + branch + ' leak test build',
                'TB Linux x86-64' + branch + ' build',
                'TB Linux x86-64' + branch + ' leak test build',
                'TB OS X 10.7 ' + branch + " build",
                'TB WINNT 5.2 ' + branch + " build",
                'TB WINNT 5.2 ' + branch + " leak test build",
                'TB WINNT 5.2 ' + branch + " pgo-build",
                'TB WINNT 6.1 x86-64 ' + branch + " build",
                'TB WINNT 6.1 x86-64 ' + branch + " pgo-build",
                'TB WINNT 6.1 x86-64 ' + branch + " leak test build",
            ])
        for bname in bnames:
            pre = s.builderNames
            s.builderNames = [b for b in s.builderNames if builder_filter(bname, b)]
            post = s.builderNames
            # builder name to be deleted
            if bname in set(pre) - set(post):
                assert len(set(pre) - set(post)) == 1
            # schedulers did not include builder name to be deleted
            else:
                assert len(set(pre) - set(post)) == 0

        if not s.builderNames:
            # This scheduler has no builders left and should be removed
            branchObjects['schedulers'].remove(s)

    # Strip away any duplicate change sources
    usefulChangeSources = []
    for cs in branchObjects['change_source']:
        if cs.branch not in [x.branch for x in buildObjects['change_source'] + usefulChangeSources]:
            usefulChangeSources.append(cs)
    branchObjects['change_source'] = usefulChangeSources
    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

for project in ACTIVE_PROJECTS:
    if PROJECTS[project].get('enable_try'):
        slaves = TRY_SLAVES
    else:
        slaves = SLAVES
    projectObjects = generateProjectObjects(project, PROJECTS[project], slaves)
    buildObjects = mergeBuildObjects(buildObjects, projectObjects)

# We only want the schedulers and change sources
c['schedulers'].extend(buildObjects['schedulers'])

# Remove duplicate change sources
for cs in buildObjects['change_source'][:]:
    while buildObjects['change_source'].count(cs) > 1:
        buildObjects['change_source'].remove(cs)

    assert buildObjects['change_source'].count(cs) == 1

c['change_source'].extend(buildObjects['change_source'])

# We also want ChangeNotifiers
for s in buildObjects['status']:
    if isinstance(s, ChangeNotifier):
        c['status'].append(s)

if ENABLE_RELEASES:
    import buildbotcustom.process.release
    reload(buildbotcustom.process.release)
    from buildbotcustom.process.release import generateReleaseBranchObjects

    # TODO remove this block when we have completely switched to release promotion
    # Bug 1215865 - remove generateReleaseBranchObjects after fully porting to release promotion
    for product, sourceRepoKey, productBranches, releaseBranch in \
            [('thunderbird', 'comm', THUNDERBIRD_BRANCHES, b)
             for b in ACTIVE_THUNDERBIRD_RELEASE_BRANCHES]:
        releaseBranchConfig = {}
        releaseConfigFile = "release-%s-%s.py" % (product, releaseBranch)
        execfile(releaseConfigFile, releaseBranchConfig, releaseBranchConfig)
        branchConfig = productBranches[releaseBranchConfig['releaseConfig']['sourceRepositories'][sourceRepoKey]['name']]
        releaseObjects = generateReleaseBranchObjects(
            releaseBranchConfig['releaseConfig'], branchConfig,
            releaseConfigFile=getRealpath(releaseConfigFile),
            sourceRepoKey=sourceRepoKey,
            secrets=getattr(passwords, 'secrets', None)
        )
        c['schedulers'].extend(releaseObjects['schedulers'])
        c['change_source'].extend(releaseObjects['change_source'])
        from buildbot.changes.pb import PBChangeSource
        if len([cs for cs in c['change_source'] if isinstance(cs, PBChangeSource)]) < 1:
            c['change_source'].append(PBChangeSource())
        # We use a ChangeNotifier to send "tagging started" mail. Since
        # release sendchanges are done on the scheduler master, we need
        # those status modules here.
        for s in releaseObjects['status']:
            if isinstance(s, ChangeNotifier):
                c['status'].append(s)


import passwords
reload(passwords)
from passwords import BBDB_URL
c['db_url'] = BBDB_URL
c['db_poll_interval'] = 10
c['multiMaster'] = True

# Scheduler masters don't need to prioritize builders, since they never have
# any workers.
del c['prioritizeBuilders']

if hasattr(passwords, 'PULSE_PASSWORD'):
    pulseQueue = QueueDir('pulse', '%s/pulse' % master_localconfig.QUEUEDIR)
    # Send pulse messages
    import re
    import buildbotcustom.status.pulse
    reload(buildbotcustom.status.pulse)
    from buildbotcustom.status.pulse import PulseStatus
    c['status'].append(PulseStatus(
        pulseQueue,
        ignoreBuilders=[re.compile('fuzzer-.*')],
        send_logs=False,
        ))

# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig
