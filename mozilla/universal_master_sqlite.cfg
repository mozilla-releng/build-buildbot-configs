# import/reload dance so that reconfigs work
# vim: ft=python
import os, sys

# NOTE: builder_master.cfg and universal_master_sqlite.cfg need to be kept in sync
#       as much of the logic is duplicated between them.

import buildbotcustom.misc
import buildbotcustom.status.queued_command
import master_common
from master_common import items_at_least
import config
import thunderbird_config
import master_localconfig
import build.paths
reload(buildbotcustom.misc)
reload(buildbotcustom.status.queued_command)
reload(master_common)
reload(config)
reload(thunderbird_config)
reload(master_localconfig)
reload(build.paths)

from master_common import BuildmasterConfig
from build.paths import getRealpath

c = BuildmasterConfig
for key, value in master_localconfig.BuildmasterConfig.items():
    if key in c:
        c[key].extend(value)
    else:
        c[key] = value

# Create our QueueDir objects
# This is reloaded in buildbotcustom.misc
from mozilla_buildtools.queuedir import QueueDir
commandsQueue = QueueDir('commands', '%s/commands' % master_localconfig.QUEUEDIR)
from buildbotcustom.status.queued_command import QueuedCommandHandler
c['status'].append(QueuedCommandHandler(
    command=[sys.executable, os.path.join(os.path.dirname(buildbotcustom.__file__), 'bin', 'postrun.py'), '-c', os.path.abspath(os.path.join(os.curdir, 'postrun.cfg'))],
    queuedir=commandsQueue,
))

from config import BRANCHES, PROJECTS
from thunderbird_config import BRANCHES as THUNDERBIRD_BRANCHES
from master_localconfig import (
    ACTIVE_BRANCHES, ACTIVE_PROJECTS, SLAVES, ENABLE_RELEASES,
    ACTIVE_RELEASE_BRANCHES,
    ACTIVE_THUNDERBIRD_BRANCHES, ACTIVE_THUNDERBIRD_RELEASE_BRANCHES)

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords
from buildbot.buildslave import BuildSlave

for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, SlavePasswords[platform], max_builds=1))

from buildbotcustom.misc import generateBranchObjects, generateProjectObjects, \
     mergeBuildObjects

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

buildObjects = {'builders': [], 'status': [], 'change_source': [], 'schedulers': []}

import passwords
reload(passwords)

def builder_filter(bname, builder_name):
    if bname not in builder_name:
        return True
    return False

# get list of branches to disable buildbot opt builds for
# Bug 1353376 - Turn off buildbot macosx64 opt builds scheduling
# Bug 1373282 - mac dev edition builds and tests will be scheduled via bbb
# Bug 1402457 - run periodic file updates via TC
disable_osx_sched = []
disable_win_sched = []
disable_periodic_file_sched = []
for name, branch in items_at_least(BRANCHES, 'gecko_version', 55):
    disable_osx_sched.append(name)
for name, branch in items_at_least(BRANCHES, 'gecko_version', 56):
    if name != "try":
        disable_win_sched.append(name)
for name, branch in items_at_least(BRANCHES, 'gecko_version', 58):
    disable_periodic_file_sched.append(name)

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch,
            getattr(passwords, 'secrets', None))
    for s in branchObjects.get('schedulers', [])[:]:
        if not s.builderNames:
            continue

        # builder names to be deleted
        bnames = []
        if branch in disable_periodic_file_sched:
            bnames.extend(['Linux x86-64 ' + branch + ' periodic file update'])
        if branch in disable_osx_sched:
            bnames.extend(['OS X 10.7 ' + branch + " build", 'OS X 10.7 ' + branch + " devedition build"])
        if branch in disable_win_sched:
            bnames.extend([
                'WINNT 5.2 ' + branch + " build",
                'WINNT 5.2 ' + branch + " leak test build",
                'WINNT 5.2 ' + branch + " pgo-build",
                'WINNT 5.2 ' + branch + " devedition build",
                'WINNT 6.1 x86-64 ' + branch + " build",
                'WINNT 6.1 x86-64 ' + branch + " pgo-build",
                'WINNT 6.1 x86-64 ' + branch + " leak test build",
                'WINNT 6.1 x86-64 ' + branch + " devedition build",
            ])
        for bname in bnames:
            pre = s.builderNames
            s.builderNames = [b for b in s.builderNames if builder_filter(bname, b)]
            post = s.builderNames
            # builder name to be deleted
            if bname in set(pre) - set(post):
                assert len(set(pre) - set(post)) == 1
            # schedulers did not include builder name to be deleted
            else:
                assert len(set(pre) - set(post)) == 0

        if not s.builderNames:
            # This scheduler has no builders left and should be removed
            branchObjects['schedulers'].remove(s)

    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

for branch in ACTIVE_THUNDERBIRD_BRANCHES:
    branchObjects = generateBranchObjects(THUNDERBIRD_BRANCHES[branch], branch)
    # Strip away any duplicate change sources
    usefulChangeSources = []
    for cs in branchObjects['change_source']:
        if cs.branch not in [x.branch for x in buildObjects['change_source'] + usefulChangeSources]:
            usefulChangeSources.append(cs)
    branchObjects['change_source'] = usefulChangeSources
    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

for project in ACTIVE_PROJECTS:
    projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
    buildObjects = mergeBuildObjects(buildObjects, projectObjects)

# Remove duplicate change sources
for cs in buildObjects['change_source'][:]:
    while buildObjects['change_source'].count(cs) > 1:
        buildObjects['change_source'].remove(cs)

    assert buildObjects['change_source'].count(cs) == 1

c['builders'].extend(buildObjects['builders'])
c['status'].extend(buildObjects['status'])
c['change_source'].extend(buildObjects['change_source'])
c['schedulers'].extend(buildObjects['schedulers'])

if ENABLE_RELEASES:
    import buildbotcustom.process.release
    reload(buildbotcustom.process.release)
    from buildbotcustom.process.release import generateReleaseBranchObjects
    from buildbotcustom.process.release import (generateReleasePromotionBuilders,
                                                generateFennecReleasePromotionBuilders)

    # TODO remove this block when we have completely switched to release promotion
    # Bug 1215865 - remove generateReleaseBranchObjects after fully porting to release promotion
    for product, sourceRepoKey, productBranches, releaseBranch in \
            [('thunderbird', 'comm', THUNDERBIRD_BRANCHES, b)
             for b in ACTIVE_THUNDERBIRD_RELEASE_BRANCHES]:
        releaseBranchConfig = {}
        releaseConfigFile = "release-%s-%s.py" % (product, releaseBranch)
        execfile(releaseConfigFile, releaseBranchConfig, releaseBranchConfig)
        branchConfig = productBranches[releaseBranchConfig['releaseConfig']['sourceRepositories'][sourceRepoKey]['name']]
        releaseObjects = generateReleaseBranchObjects(
            releaseBranchConfig['releaseConfig'], branchConfig,
            releaseConfigFile=getRealpath(releaseConfigFile),
            sourceRepoKey=sourceRepoKey,
            secrets=getattr(passwords, 'secrets', None)
        )
        for key in releaseObjects.keys():
            c[key].extend(releaseObjects[key])
        from buildbot.changes.pb import PBChangeSource
        if len([cs for cs in c['change_source'] if isinstance(cs, PBChangeSource)]) < 1:
            c['change_source'].append(PBChangeSource())

    # Bug 1213317 - Move release promotion buildbot builders to separate module.
    #
    # Rather than creating a temporary ACTIVE_RELEASE_PROMOTION_BRANCHES in
    # build_localconfig.py and master_config.json, it is easier to pivot of the existing branch
    # config's 'enable_release_promotion'. In addition, these release promotion builders are
    # only related to buildbot-bridge jobs and should be temporary.
    #
    # In other words, if a branch is 'active' and has 'enable_release_promotion', the
    # build master will have both CI and release promotion builders for that branch.
    for branch in ACTIVE_BRANCHES:
        if BRANCHES[branch].get('enable_release_promotion', {}).get("firefox"):
            c['builders'].extend(generateReleasePromotionBuilders(
                branch_config=BRANCHES[branch], branch_name=branch,
                product="firefox",
                secrets=getattr(passwords, 'secrets', None)
            ))
        if BRANCHES[branch].get('enable_release_promotion', {}).get("devedition"):
            c['builders'].extend(generateReleasePromotionBuilders(
                branch_config=BRANCHES[branch], branch_name=branch,
                product="devedition",
                secrets=getattr(passwords, 'secrets', None)
            ))
        if BRANCHES[branch].get('enable_release_promotion', {}).get("fennec"):
            c['builders'].extend(generateFennecReleasePromotionBuilders(
                branch_config=BRANCHES[branch], branch_name=branch,
                product="fennec",
                secrets=getattr(passwords, 'secrets', None)
            ))

c['db_url'] = "sqlite:///state.sqlite"

c['mergeRequests'] = buildbotcustom.misc.mergeRequests

if hasattr(passwords, 'PULSE_PASSWORD'):
    pulseQueue = QueueDir('pulse', '%s/pulse' % master_localconfig.QUEUEDIR)
    # Send pulse messages
    import re
    import buildbotcustom.status.pulse
    reload(buildbotcustom.status.pulse)
    from buildbotcustom.status.pulse import PulseStatus
    c['status'].append(PulseStatus(
        pulseQueue,
        ignoreBuilders=[re.compile('fuzzer-.*')],
        send_logs=False,
        ))

# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig

# Check that all our builders have branch, platform and product set
for b in c['builders']:
    assert 'properties' in b, b
    assert 'branch' in b['properties'], b
    assert 'platform' in b['properties'], b
    assert 'product' in b['properties'], b

# Check that we don't have more too many  builders for any one slave
from collections import defaultdict
_buildersBySlave = defaultdict(int)
for b in c['builders']:
    for s in b['slavenames']:
        _buildersBySlave[s] += 1

for s, count in _buildersBySlave.items():
    # There are around 12 other PB refs used between the master and slave that
    # aren't builders
    builderLimit = 4096 - 12
    assert count <= builderLimit, "%s has %i builders; limit is %i" % (s, count, builderLimit)

del _buildersBySlave
